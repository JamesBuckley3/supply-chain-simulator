"""
db_loader.py

This module provides functionality to populate the database with supplier, item,
customer, and inventory data generated by the simulation.
"""

import random


class SimulationDBLoader:
    """
    Handles populating the PostgreSQL database with generated supply chain data.

    Attributes:
        conn: A live database connection object.
        cur: The cursor object used to execute SQL commands.
    """

    def __init__(self, conn):
        """
        Initialises the database loader with a connection and cursor.

        Args:
            conn: A psycopg2 (or compatible) connection object to the database.
        """
        self.conn = conn
        self.cur = conn.cursor()

    def populate_tables(self, suppliers, items, customers, sim_time):
        """
        Populates the database tables with generated suppliers, items, customers, and inventory levels.

        Args:
            suppliers (dict[int, Supplier]): A dictionary of Supplier objects keyed by supplier ID.
            items (dict[int, Item]): A dictionary of Item objects keyed by item ID.
            customers (dict[int, Customer]): A dictionary of Customer objects keyed by customer ID.
            sim_time (datetime): The simulated time used to set the inventory's `LAST_UPDATED` field.

        Notes:
            - Inventory is initialised with a fixed quantity of 20 units per item-supplier pair
              where the supplier's category matches the item's category.
            - A random reorder point (0–10) is assigned per inventory entry.
        """
        for customer in customers.values():
            self.cur.execute(
                "INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, REGION) VALUES (%s, %s, %s)",
                (customer.id, customer.name, customer.region),
            )

        for supplier in suppliers.values():
            self.cur.execute(
                "INSERT INTO SUPPLIERS (SUPPLIER_ID, NAME, CATEGORY) VALUES (%s, %s, %s)",
                (supplier.id, supplier.name, supplier.category),
            )

        for item in items.values():
            self.cur.execute(
                "INSERT INTO ITEMS (ITEM_ID, NAME, CATEGORY, UNIT_PRICE) VALUES (%s, %s, %s, %s)",
                (item.id, item.name, item.category, item.unit_price),
            )

        for supplier in suppliers.values():
            for item in items.values():
                if item.category == supplier.category:
                    self.cur.execute(
                        "INSERT INTO INVENTORY (ITEM_ID, SUPPLIER_ID, QUANTITY_ON_HAND, REORDER_POINT, LAST_UPDATED) "
                        "VALUES (%s, %s, %s, %s, %s)",
                        (
                            item.id,
                            supplier.id,
                            20,
                            random.randint(0, 10),
                            sim_time.date(),
                        ),
                    )

        self.conn.commit()
        print("✅ Database populated.")
